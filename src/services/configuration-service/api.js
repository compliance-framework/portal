"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Compliance Framework Configuration Service API
 * This is the API for the Compliance Framework Configuration Service.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends =
  (this && this.__extends) ||
  (function () {
    var extendStatics = function (d, b) {
      extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      return extendStatics(d, b);
    };
    return function (d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
    };
  })();
var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
var __generator =
  (this && this.__generator) ||
  function (thisArg, body) {
    var _ = {
        label: 0,
        sent: function () {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: [],
      },
      f,
      y,
      t,
      g;
    return (
      (g = { next: verb(0), throw: verb(1), return: verb(2) }),
      typeof Symbol === "function" &&
        (g[Symbol.iterator] = function () {
          return this;
        }),
      g
    );
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while ((g && ((g = 0), op[0] && (_ = 0)), _))
        try {
          if (
            ((f = 1),
            y &&
              (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) &&
              !(t = t.call(y, op[1])).done)
          )
            return t;
          if (((y = 0), t)) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5) throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlanApi =
  exports.PlanApiFactory =
  exports.PlanApiFp =
  exports.PlanApiAxiosParamCreator =
  exports.MetadataApi =
  exports.MetadataApiFactory =
  exports.MetadataApiFp =
  exports.MetadataApiAxiosParamCreator =
  exports.CatalogApi =
  exports.CatalogApiFactory =
  exports.CatalogApiFp =
  exports.CatalogApiAxiosParamCreator =
  exports.ServiceRiskState =
  exports.ServiceRiskSeverity =
    void 0;
var axios_1 = require("axios");
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
exports.ServiceRiskSeverity = {
  Medium: "medium",
  Low: "low",
  High: "high",
};
/**
 *
 * @export
 * @enum {string}
 */
exports.ServiceRiskState = {
  Pass: "pass",
  Warn: "warn",
  Fail: "fail",
  Indeterminate: "indeterminate",
};
/**
 * CatalogApi - axios parameter creator
 * @export
 */
var CatalogApiAxiosParamCreator = function (configuration) {
  var _this = this;
  return {
    /**
     * Create a catalog with the given title
     * @summary Create a catalog
     * @param {HandlerCreateCatalogRequest} handlerCreateCatalogRequest Catalog to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    catalogPost: function (handlerCreateCatalogRequest, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'handlerCreateCatalogRequest' is not null or undefined
          (0, common_1.assertParamExists)("catalogPost", "handlerCreateCatalogRequest", handlerCreateCatalogRequest);
          localVarPath = "/catalog";
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
            handlerCreateCatalogRequest,
            localVarRequestOptions,
            configuration,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
  };
};
exports.CatalogApiAxiosParamCreator = CatalogApiAxiosParamCreator;
/**
 * CatalogApi - functional programming interface
 * @export
 */
var CatalogApiFp = function (configuration) {
  var localVarAxiosParamCreator = (0, exports.CatalogApiAxiosParamCreator)(configuration);
  return {
    /**
     * Create a catalog with the given title
     * @summary Create a catalog
     * @param {HandlerCreateCatalogRequest} handlerCreateCatalogRequest Catalog to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    catalogPost: function (handlerCreateCatalogRequest, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4 /*yield*/, localVarAxiosParamCreator.catalogPost(handlerCreateCatalogRequest, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
  };
};
exports.CatalogApiFp = CatalogApiFp;
/**
 * CatalogApi - factory interface
 * @export
 */
var CatalogApiFactory = function (configuration, basePath, axios) {
  var localVarFp = (0, exports.CatalogApiFp)(configuration);
  return {
    /**
     * Create a catalog with the given title
     * @summary Create a catalog
     * @param {HandlerCreateCatalogRequest} handlerCreateCatalogRequest Catalog to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    catalogPost: function (handlerCreateCatalogRequest, options) {
      return localVarFp.catalogPost(handlerCreateCatalogRequest, options).then(function (request) {
        return request(axios, basePath);
      });
    },
  };
};
exports.CatalogApiFactory = CatalogApiFactory;
/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
var CatalogApi = /** @class */ (function (_super) {
  __extends(CatalogApi, _super);
  function CatalogApi() {
    return (_super !== null && _super.apply(this, arguments)) || this;
  }
  /**
   * Create a catalog with the given title
   * @summary Create a catalog
   * @param {HandlerCreateCatalogRequest} handlerCreateCatalogRequest Catalog to add
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogApi
   */
  CatalogApi.prototype.catalogPost = function (handlerCreateCatalogRequest, options) {
    var _this = this;
    return (0, exports.CatalogApiFp)(this.configuration)
      .catalogPost(handlerCreateCatalogRequest, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  return CatalogApi;
})(base_1.BaseAPI);
exports.CatalogApi = CatalogApi;
/**
 * MetadataApi - axios parameter creator
 * @export
 */
var MetadataApiAxiosParamCreator = function (configuration) {
  var _this = this;
  return {
    /**
     * This method attaches metadata to a specific revision.
     * @summary Attaches metadata to a specific revision
     * @param {HandlerAttachMetadataRequest} handlerAttachMetadataRequest Revision that will be attached
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadataRevisionsPost: function (handlerAttachMetadataRequest, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'handlerAttachMetadataRequest' is not null or undefined
          (0, common_1.assertParamExists)(
            "metadataRevisionsPost",
            "handlerAttachMetadataRequest",
            handlerAttachMetadataRequest,
          );
          localVarPath = "/metadata/revisions";
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
            handlerAttachMetadataRequest,
            localVarRequestOptions,
            configuration,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
  };
};
exports.MetadataApiAxiosParamCreator = MetadataApiAxiosParamCreator;
/**
 * MetadataApi - functional programming interface
 * @export
 */
var MetadataApiFp = function (configuration) {
  var localVarAxiosParamCreator = (0, exports.MetadataApiAxiosParamCreator)(configuration);
  return {
    /**
     * This method attaches metadata to a specific revision.
     * @summary Attaches metadata to a specific revision
     * @param {HandlerAttachMetadataRequest} handlerAttachMetadataRequest Revision that will be attached
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadataRevisionsPost: function (handlerAttachMetadataRequest, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [
                4 /*yield*/,
                localVarAxiosParamCreator.metadataRevisionsPost(handlerAttachMetadataRequest, options),
              ];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
  };
};
exports.MetadataApiFp = MetadataApiFp;
/**
 * MetadataApi - factory interface
 * @export
 */
var MetadataApiFactory = function (configuration, basePath, axios) {
  var localVarFp = (0, exports.MetadataApiFp)(configuration);
  return {
    /**
     * This method attaches metadata to a specific revision.
     * @summary Attaches metadata to a specific revision
     * @param {HandlerAttachMetadataRequest} handlerAttachMetadataRequest Revision that will be attached
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadataRevisionsPost: function (handlerAttachMetadataRequest, options) {
      return localVarFp.metadataRevisionsPost(handlerAttachMetadataRequest, options).then(function (request) {
        return request(axios, basePath);
      });
    },
  };
};
exports.MetadataApiFactory = MetadataApiFactory;
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
var MetadataApi = /** @class */ (function (_super) {
  __extends(MetadataApi, _super);
  function MetadataApi() {
    return (_super !== null && _super.apply(this, arguments)) || this;
  }
  /**
   * This method attaches metadata to a specific revision.
   * @summary Attaches metadata to a specific revision
   * @param {HandlerAttachMetadataRequest} handlerAttachMetadataRequest Revision that will be attached
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetadataApi
   */
  MetadataApi.prototype.metadataRevisionsPost = function (handlerAttachMetadataRequest, options) {
    var _this = this;
    return (0, exports.MetadataApiFp)(this.configuration)
      .metadataRevisionsPost(handlerAttachMetadataRequest, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  return MetadataApi;
})(base_1.BaseAPI);
exports.MetadataApi = MetadataApi;
/**
 * PlanApi - axios parameter creator
 * @export
 */
var PlanApiAxiosParamCreator = function (configuration) {
  var _this = this;
  return {
    /**
     * Activate a plan by its ID. If the plan is already active, no action will be taken.
     * @summary Activate a plan
     * @param {string} id Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdActivatePut: function (id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'id' is not null or undefined
          (0, common_1.assertParamExists)("planIdActivatePut", "id", id);
          localVarPath = "/plan/{id}/activate".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
    /**
     * Return the assessment results related with the plan with the given ID.
     * @summary Return the assessment results
     * @param {string} id Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsGet: function (id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'id' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsGet", "id", id);
          localVarPath = "/plan/{id}/results".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
    /**
     * Return the compliance over time of the result with the given ID.
     * @summary Return the compliance over time
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdComplianceOverTimeGet: function (id, resultId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'id' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdComplianceOverTimeGet", "id", id);
          // verify required parameter 'resultId' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdComplianceOverTimeGet", "resultId", resultId);
          localVarPath = "/plan/{id}/results/{resultId}/compliance-over-time"
            .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
            .replace("{".concat("resultId", "}"), encodeURIComponent(String(resultId)));
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
    /**
     * Return the compliance status by targets of the result with the given ID.
     * @summary Return the compliance status by targets
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdComplianceStatusByTargetsGet: function (id, resultId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'id' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdComplianceStatusByTargetsGet", "id", id);
          // verify required parameter 'resultId' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdComplianceStatusByTargetsGet", "resultId", resultId);
          localVarPath = "/plan/{id}/results/{resultId}/compliance-status-by-targets"
            .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
            .replace("{".concat("resultId", "}"), encodeURIComponent(String(resultId)));
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
    /**
     * Return the findings of the result with the given ID.
     * @summary Return the findings
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdFindingsGet: function (id, resultId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'id' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdFindingsGet", "id", id);
          // verify required parameter 'resultId' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdFindingsGet", "resultId", resultId);
          localVarPath = "/plan/{id}/results/{resultId}/findings"
            .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
            .replace("{".concat("resultId", "}"), encodeURIComponent(String(resultId)));
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
    /**
     * Return the observations of the result with the given ID.
     * @summary Return the observations
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdObservationsGet: function (id, resultId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'id' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdObservationsGet", "id", id);
          // verify required parameter 'resultId' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdObservationsGet", "resultId", resultId);
          localVarPath = "/plan/{id}/results/{resultId}/observations"
            .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
            .replace("{".concat("resultId", "}"), encodeURIComponent(String(resultId)));
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
    /**
     * Return the remediation versus time of the result with the given ID.
     * @summary Return the remediation versus time
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdRemediationVsTimeGet: function (id, resultId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'id' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdRemediationVsTimeGet", "id", id);
          // verify required parameter 'resultId' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdRemediationVsTimeGet", "resultId", resultId);
          localVarPath = "/plan/{id}/results/{resultId}/remediation-vs-time"
            .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
            .replace("{".concat("resultId", "}"), encodeURIComponent(String(resultId)));
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
    /**
     * Return the risks of the result with the given ID.
     * @summary Return the risks
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdRisksGet: function (id, resultId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'id' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdRisksGet", "id", id);
          // verify required parameter 'resultId' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdRisksGet", "resultId", resultId);
          localVarPath = "/plan/{id}/results/{resultId}/risks"
            .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
            .replace("{".concat("resultId", "}"), encodeURIComponent(String(resultId)));
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
    /**
     * Return the summary of the result with the given ID.
     * @summary Return the result summary
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdSummaryGet: function (id, resultId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'id' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdSummaryGet", "id", id);
          // verify required parameter 'resultId' is not null or undefined
          (0, common_1.assertParamExists)("planIdResultsResultIdSummaryGet", "resultId", resultId);
          localVarPath = "/plan/{id}/results/{resultId}/summary"
            .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
            .replace("{".concat("resultId", "}"), encodeURIComponent(String(resultId)));
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
    /**
     * This method creates a new task and adds it to a specific plan.
     * @summary Creates a new task for a specific plan
     * @param {string} id Plan ID
     * @param {HandlerCreateTaskRequest} handlerCreateTaskRequest Task to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdTasksPost: function (id, handlerCreateTaskRequest, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'id' is not null or undefined
          (0, common_1.assertParamExists)("planIdTasksPost", "id", id);
          // verify required parameter 'handlerCreateTaskRequest' is not null or undefined
          (0, common_1.assertParamExists)("planIdTasksPost", "handlerCreateTaskRequest", handlerCreateTaskRequest);
          localVarPath = "/plan/{id}/tasks".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
            handlerCreateTaskRequest,
            localVarRequestOptions,
            configuration,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
    /**
     * This function is used to create an activity for a given task.
     * @summary Create activity
     * @param {number} id Plan ID
     * @param {number} taskId Task ID
     * @param {HandlerCreateActivityRequest} handlerCreateActivityRequest Activity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdTasksTaskIdActivitiesPost: function (id, taskId, handlerCreateActivityRequest, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'id' is not null or undefined
          (0, common_1.assertParamExists)("planIdTasksTaskIdActivitiesPost", "id", id);
          // verify required parameter 'taskId' is not null or undefined
          (0, common_1.assertParamExists)("planIdTasksTaskIdActivitiesPost", "taskId", taskId);
          // verify required parameter 'handlerCreateActivityRequest' is not null or undefined
          (0, common_1.assertParamExists)(
            "planIdTasksTaskIdActivitiesPost",
            "handlerCreateActivityRequest",
            handlerCreateActivityRequest,
          );
          localVarPath = "/plan/{id}/tasks/{taskId}/activities"
            .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
            .replace("{".concat("taskId", "}"), encodeURIComponent(String(taskId)));
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
            handlerCreateActivityRequest,
            localVarRequestOptions,
            configuration,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
    /**
     * Creates a new plan in the system
     * @summary Create a plan
     * @param {HandlerCreatePlanRequest} handlerCreatePlanRequest Plan to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planPost: function (handlerCreatePlanRequest, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function () {
        var localVarPath,
          localVarUrlObj,
          baseOptions,
          localVarRequestOptions,
          localVarHeaderParameter,
          localVarQueryParameter,
          headersFromBaseOptions;
        return __generator(this, function (_a) {
          // verify required parameter 'handlerCreatePlanRequest' is not null or undefined
          (0, common_1.assertParamExists)("planPost", "handlerCreatePlanRequest", handlerCreatePlanRequest);
          localVarPath = "/plan";
          localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
          localVarHeaderParameter = {};
          localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = __assign(
            __assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions),
            options.headers,
          );
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
            handlerCreatePlanRequest,
            localVarRequestOptions,
            configuration,
          );
          return [
            2 /*return*/,
            {
              url: (0, common_1.toPathString)(localVarUrlObj),
              options: localVarRequestOptions,
            },
          ];
        });
      });
    },
  };
};
exports.PlanApiAxiosParamCreator = PlanApiAxiosParamCreator;
/**
 * PlanApi - functional programming interface
 * @export
 */
var PlanApiFp = function (configuration) {
  var localVarAxiosParamCreator = (0, exports.PlanApiAxiosParamCreator)(configuration);
  return {
    /**
     * Activate a plan by its ID. If the plan is already active, no action will be taken.
     * @summary Activate a plan
     * @param {string} id Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdActivatePut: function (id, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4 /*yield*/, localVarAxiosParamCreator.planIdActivatePut(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
    /**
     * Return the assessment results related with the plan with the given ID.
     * @summary Return the assessment results
     * @param {string} id Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsGet: function (id, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4 /*yield*/, localVarAxiosParamCreator.planIdResultsGet(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
    /**
     * Return the compliance over time of the result with the given ID.
     * @summary Return the compliance over time
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdComplianceOverTimeGet: function (id, resultId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [
                4 /*yield*/,
                localVarAxiosParamCreator.planIdResultsResultIdComplianceOverTimeGet(id, resultId, options),
              ];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
    /**
     * Return the compliance status by targets of the result with the given ID.
     * @summary Return the compliance status by targets
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdComplianceStatusByTargetsGet: function (id, resultId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [
                4 /*yield*/,
                localVarAxiosParamCreator.planIdResultsResultIdComplianceStatusByTargetsGet(id, resultId, options),
              ];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
    /**
     * Return the findings of the result with the given ID.
     * @summary Return the findings
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdFindingsGet: function (id, resultId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4 /*yield*/, localVarAxiosParamCreator.planIdResultsResultIdFindingsGet(id, resultId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
    /**
     * Return the observations of the result with the given ID.
     * @summary Return the observations
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdObservationsGet: function (id, resultId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [
                4 /*yield*/,
                localVarAxiosParamCreator.planIdResultsResultIdObservationsGet(id, resultId, options),
              ];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
    /**
     * Return the remediation versus time of the result with the given ID.
     * @summary Return the remediation versus time
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdRemediationVsTimeGet: function (id, resultId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [
                4 /*yield*/,
                localVarAxiosParamCreator.planIdResultsResultIdRemediationVsTimeGet(id, resultId, options),
              ];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
    /**
     * Return the risks of the result with the given ID.
     * @summary Return the risks
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdRisksGet: function (id, resultId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4 /*yield*/, localVarAxiosParamCreator.planIdResultsResultIdRisksGet(id, resultId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
    /**
     * Return the summary of the result with the given ID.
     * @summary Return the result summary
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdSummaryGet: function (id, resultId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4 /*yield*/, localVarAxiosParamCreator.planIdResultsResultIdSummaryGet(id, resultId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
    /**
     * This method creates a new task and adds it to a specific plan.
     * @summary Creates a new task for a specific plan
     * @param {string} id Plan ID
     * @param {HandlerCreateTaskRequest} handlerCreateTaskRequest Task to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdTasksPost: function (id, handlerCreateTaskRequest, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4 /*yield*/, localVarAxiosParamCreator.planIdTasksPost(id, handlerCreateTaskRequest, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
    /**
     * This function is used to create an activity for a given task.
     * @summary Create activity
     * @param {number} id Plan ID
     * @param {number} taskId Task ID
     * @param {HandlerCreateActivityRequest} handlerCreateActivityRequest Activity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdTasksTaskIdActivitiesPost: function (id, taskId, handlerCreateActivityRequest, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [
                4 /*yield*/,
                localVarAxiosParamCreator.planIdTasksTaskIdActivitiesPost(
                  id,
                  taskId,
                  handlerCreateActivityRequest,
                  options,
                ),
              ];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
    /**
     * Creates a new plan in the system
     * @summary Create a plan
     * @param {HandlerCreatePlanRequest} handlerCreatePlanRequest Plan to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planPost: function (handlerCreatePlanRequest, options) {
      return __awaiter(this, void 0, void 0, function () {
        var localVarAxiosArgs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4 /*yield*/, localVarAxiosParamCreator.planPost(handlerCreatePlanRequest, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [
                2 /*return*/,
                (0, common_1.createRequestFunction)(
                  localVarAxiosArgs,
                  axios_1.default,
                  base_1.BASE_PATH,
                  configuration,
                ),
              ];
          }
        });
      });
    },
  };
};
exports.PlanApiFp = PlanApiFp;
/**
 * PlanApi - factory interface
 * @export
 */
var PlanApiFactory = function (configuration, basePath, axios) {
  var localVarFp = (0, exports.PlanApiFp)(configuration);
  return {
    /**
     * Activate a plan by its ID. If the plan is already active, no action will be taken.
     * @summary Activate a plan
     * @param {string} id Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdActivatePut: function (id, options) {
      return localVarFp.planIdActivatePut(id, options).then(function (request) {
        return request(axios, basePath);
      });
    },
    /**
     * Return the assessment results related with the plan with the given ID.
     * @summary Return the assessment results
     * @param {string} id Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsGet: function (id, options) {
      return localVarFp.planIdResultsGet(id, options).then(function (request) {
        return request(axios, basePath);
      });
    },
    /**
     * Return the compliance over time of the result with the given ID.
     * @summary Return the compliance over time
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdComplianceOverTimeGet: function (id, resultId, options) {
      return localVarFp.planIdResultsResultIdComplianceOverTimeGet(id, resultId, options).then(function (request) {
        return request(axios, basePath);
      });
    },
    /**
     * Return the compliance status by targets of the result with the given ID.
     * @summary Return the compliance status by targets
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdComplianceStatusByTargetsGet: function (id, resultId, options) {
      return localVarFp
        .planIdResultsResultIdComplianceStatusByTargetsGet(id, resultId, options)
        .then(function (request) {
          return request(axios, basePath);
        });
    },
    /**
     * Return the findings of the result with the given ID.
     * @summary Return the findings
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdFindingsGet: function (id, resultId, options) {
      return localVarFp.planIdResultsResultIdFindingsGet(id, resultId, options).then(function (request) {
        return request(axios, basePath);
      });
    },
    /**
     * Return the observations of the result with the given ID.
     * @summary Return the observations
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdObservationsGet: function (id, resultId, options) {
      return localVarFp.planIdResultsResultIdObservationsGet(id, resultId, options).then(function (request) {
        return request(axios, basePath);
      });
    },
    /**
     * Return the remediation versus time of the result with the given ID.
     * @summary Return the remediation versus time
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdRemediationVsTimeGet: function (id, resultId, options) {
      return localVarFp.planIdResultsResultIdRemediationVsTimeGet(id, resultId, options).then(function (request) {
        return request(axios, basePath);
      });
    },
    /**
     * Return the risks of the result with the given ID.
     * @summary Return the risks
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdRisksGet: function (id, resultId, options) {
      return localVarFp.planIdResultsResultIdRisksGet(id, resultId, options).then(function (request) {
        return request(axios, basePath);
      });
    },
    /**
     * Return the summary of the result with the given ID.
     * @summary Return the result summary
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdResultsResultIdSummaryGet: function (id, resultId, options) {
      return localVarFp.planIdResultsResultIdSummaryGet(id, resultId, options).then(function (request) {
        return request(axios, basePath);
      });
    },
    /**
     * This method creates a new task and adds it to a specific plan.
     * @summary Creates a new task for a specific plan
     * @param {string} id Plan ID
     * @param {HandlerCreateTaskRequest} handlerCreateTaskRequest Task to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdTasksPost: function (id, handlerCreateTaskRequest, options) {
      return localVarFp.planIdTasksPost(id, handlerCreateTaskRequest, options).then(function (request) {
        return request(axios, basePath);
      });
    },
    /**
     * This function is used to create an activity for a given task.
     * @summary Create activity
     * @param {number} id Plan ID
     * @param {number} taskId Task ID
     * @param {HandlerCreateActivityRequest} handlerCreateActivityRequest Activity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planIdTasksTaskIdActivitiesPost: function (id, taskId, handlerCreateActivityRequest, options) {
      return localVarFp
        .planIdTasksTaskIdActivitiesPost(id, taskId, handlerCreateActivityRequest, options)
        .then(function (request) {
          return request(axios, basePath);
        });
    },
    /**
     * Creates a new plan in the system
     * @summary Create a plan
     * @param {HandlerCreatePlanRequest} handlerCreatePlanRequest Plan to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planPost: function (handlerCreatePlanRequest, options) {
      return localVarFp.planPost(handlerCreatePlanRequest, options).then(function (request) {
        return request(axios, basePath);
      });
    },
  };
};
exports.PlanApiFactory = PlanApiFactory;
/**
 * PlanApi - object-oriented interface
 * @export
 * @class PlanApi
 * @extends {BaseAPI}
 */
var PlanApi = /** @class */ (function (_super) {
  __extends(PlanApi, _super);
  function PlanApi() {
    return (_super !== null && _super.apply(this, arguments)) || this;
  }
  /**
   * Activate a plan by its ID. If the plan is already active, no action will be taken.
   * @summary Activate a plan
   * @param {string} id Plan ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  PlanApi.prototype.planIdActivatePut = function (id, options) {
    var _this = this;
    return (0, exports.PlanApiFp)(this.configuration)
      .planIdActivatePut(id, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  /**
   * Return the assessment results related with the plan with the given ID.
   * @summary Return the assessment results
   * @param {string} id Plan ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  PlanApi.prototype.planIdResultsGet = function (id, options) {
    var _this = this;
    return (0, exports.PlanApiFp)(this.configuration)
      .planIdResultsGet(id, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  /**
   * Return the compliance over time of the result with the given ID.
   * @summary Return the compliance over time
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  PlanApi.prototype.planIdResultsResultIdComplianceOverTimeGet = function (id, resultId, options) {
    var _this = this;
    return (0, exports.PlanApiFp)(this.configuration)
      .planIdResultsResultIdComplianceOverTimeGet(id, resultId, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  /**
   * Return the compliance status by targets of the result with the given ID.
   * @summary Return the compliance status by targets
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  PlanApi.prototype.planIdResultsResultIdComplianceStatusByTargetsGet = function (id, resultId, options) {
    var _this = this;
    return (0, exports.PlanApiFp)(this.configuration)
      .planIdResultsResultIdComplianceStatusByTargetsGet(id, resultId, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  /**
   * Return the findings of the result with the given ID.
   * @summary Return the findings
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  PlanApi.prototype.planIdResultsResultIdFindingsGet = function (id, resultId, options) {
    var _this = this;
    return (0, exports.PlanApiFp)(this.configuration)
      .planIdResultsResultIdFindingsGet(id, resultId, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  /**
   * Return the observations of the result with the given ID.
   * @summary Return the observations
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  PlanApi.prototype.planIdResultsResultIdObservationsGet = function (id, resultId, options) {
    var _this = this;
    return (0, exports.PlanApiFp)(this.configuration)
      .planIdResultsResultIdObservationsGet(id, resultId, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  /**
   * Return the remediation versus time of the result with the given ID.
   * @summary Return the remediation versus time
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  PlanApi.prototype.planIdResultsResultIdRemediationVsTimeGet = function (id, resultId, options) {
    var _this = this;
    return (0, exports.PlanApiFp)(this.configuration)
      .planIdResultsResultIdRemediationVsTimeGet(id, resultId, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  /**
   * Return the risks of the result with the given ID.
   * @summary Return the risks
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  PlanApi.prototype.planIdResultsResultIdRisksGet = function (id, resultId, options) {
    var _this = this;
    return (0, exports.PlanApiFp)(this.configuration)
      .planIdResultsResultIdRisksGet(id, resultId, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  /**
   * Return the summary of the result with the given ID.
   * @summary Return the result summary
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  PlanApi.prototype.planIdResultsResultIdSummaryGet = function (id, resultId, options) {
    var _this = this;
    return (0, exports.PlanApiFp)(this.configuration)
      .planIdResultsResultIdSummaryGet(id, resultId, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  /**
   * This method creates a new task and adds it to a specific plan.
   * @summary Creates a new task for a specific plan
   * @param {string} id Plan ID
   * @param {HandlerCreateTaskRequest} handlerCreateTaskRequest Task to add
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  PlanApi.prototype.planIdTasksPost = function (id, handlerCreateTaskRequest, options) {
    var _this = this;
    return (0, exports.PlanApiFp)(this.configuration)
      .planIdTasksPost(id, handlerCreateTaskRequest, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  /**
   * This function is used to create an activity for a given task.
   * @summary Create activity
   * @param {number} id Plan ID
   * @param {number} taskId Task ID
   * @param {HandlerCreateActivityRequest} handlerCreateActivityRequest Activity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  PlanApi.prototype.planIdTasksTaskIdActivitiesPost = function (id, taskId, handlerCreateActivityRequest, options) {
    var _this = this;
    return (0, exports.PlanApiFp)(this.configuration)
      .planIdTasksTaskIdActivitiesPost(id, taskId, handlerCreateActivityRequest, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  /**
   * Creates a new plan in the system
   * @summary Create a plan
   * @param {HandlerCreatePlanRequest} handlerCreatePlanRequest Plan to add
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  PlanApi.prototype.planPost = function (handlerCreatePlanRequest, options) {
    var _this = this;
    return (0, exports.PlanApiFp)(this.configuration)
      .planPost(handlerCreatePlanRequest, options)
      .then(function (request) {
        return request(_this.axios, _this.basePath);
      });
  };
  return PlanApi;
})(base_1.BaseAPI);
exports.PlanApi = PlanApi;
