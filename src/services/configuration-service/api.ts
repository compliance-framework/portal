/* tslint:disable */
/* eslint-disable */
/**
 * Compliance Framework Configuration Service API
 * This is the API for the Compliance Framework Configuration Service.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosPromise, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
import type { Configuration } from "./configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import type { RequestArgs } from "./base";
import {
  assertParamExists,
  createRequestFunction,
  DUMMY_BASE_URL,
  serializeDataIfNeeded,
  setSearchParams,
  toPathString,
} from "./common";
// @ts-ignore
import { BaseAPI, BASE_PATH } from "./base";

/**
 *
 * @export
 * @interface ApiError
 */
export interface ApiError {
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof ApiError
   */
  errors?: { [key: string]: any };
}
/**
 *
 * @export
 * @interface DomainAttestation
 */
export interface DomainAttestation {
  /**
   *
   * @type {Array<DomainPart>}
   * @memberof DomainAttestation
   */
  parts?: Array<DomainPart>;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainAttestation
   */
  responsibleParties?: Array<string>;
}
/**
 *
 * @export
 * @interface DomainCharacterization
 */
export interface DomainCharacterization {
  /**
   *
   * @type {Array<DomainFacet>}
   * @memberof DomainCharacterization
   */
  facets?: Array<DomainFacet>;
  /**
   *
   * @type {Array<DomainLink>}
   * @memberof DomainCharacterization
   */
  links?: Array<DomainLink>;
  /**
   *
   * @type {DomainOrigin}
   * @memberof DomainCharacterization
   */
  origin?: DomainOrigin;
  /**
   *
   * @type {Array<DomainProperty>}
   * @memberof DomainCharacterization
   */
  props?: Array<DomainProperty>;
}
/**
 *
 * @export
 * @interface DomainControlsAndObjectives
 */
export interface DomainControlsAndObjectives {
  /**
   *
   * @type {DomainSelection}
   * @memberof DomainControlsAndObjectives
   */
  controlSelections?: DomainSelection;
  /**
   *
   * @type {string}
   * @memberof DomainControlsAndObjectives
   */
  description?: string;
  /**
   *
   * @type {Array<DomainLink>}
   * @memberof DomainControlsAndObjectives
   */
  links?: Array<DomainLink>;
  /**
   *
   * @type {Array<DomainObjectiveSelection>}
   * @memberof DomainControlsAndObjectives
   */
  objectives?: Array<DomainObjectiveSelection>;
  /**
   *
   * @type {Array<DomainProperty>}
   * @memberof DomainControlsAndObjectives
   */
  props?: Array<DomainProperty>;
  /**
   *
   * @type {string}
   * @memberof DomainControlsAndObjectives
   */
  remarks?: string;
  /**
   *
   * @type {string}
   * @memberof DomainControlsAndObjectives
   */
  title?: string;
}
/**
 *
 * @export
 * @interface DomainEvidence
 */
export interface DomainEvidence {
  /**
   *
   * @type {string}
   * @memberof DomainEvidence
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof DomainEvidence
   */
  id?: string;
  /**
   *
   * @type {Array<DomainLink>}
   * @memberof DomainEvidence
   */
  links?: Array<DomainLink>;
  /**
   *
   * @type {Array<DomainProperty>}
   * @memberof DomainEvidence
   */
  props?: Array<DomainProperty>;
  /**
   *
   * @type {string}
   * @memberof DomainEvidence
   */
  remarks?: string;
  /**
   *
   * @type {string}
   * @memberof DomainEvidence
   */
  title?: string;
}
/**
 *
 * @export
 * @interface DomainFacet
 */
export interface DomainFacet {
  /**
   *
   * @type {string}
   * @memberof DomainFacet
   */
  description?: string;
  /**
   *
   * @type {Array<DomainLink>}
   * @memberof DomainFacet
   */
  links?: Array<DomainLink>;
  /**
   *
   * @type {string}
   * @memberof DomainFacet
   */
  name?: string;
  /**
   *
   * @type {Array<DomainProperty>}
   * @memberof DomainFacet
   */
  props?: Array<DomainProperty>;
  /**
   *
   * @type {string}
   * @memberof DomainFacet
   */
  remarks?: string;
  /**
   * One of: http://fedramp.gov, http://fedramp.gov/ns/oscal, http://csrc.nist.gov/ns/oscal, http://csrc.nist.gov/ns/oscal/unknown, http://cve.mitre.org, http://www.first.org/cvss/v2.0, http://www.first.org/cvss/v3.0, http://www.first.org/cvss/v3.1
   * @type {string}
   * @memberof DomainFacet
   */
  system?: string;
  /**
   *
   * @type {string}
   * @memberof DomainFacet
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof DomainFacet
   */
  value?: string;
}
/**
 *
 * @export
 * @interface DomainFinding
 */
export interface DomainFinding {
  /**
   *
   * @type {string}
   * @memberof DomainFinding
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof DomainFinding
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof DomainFinding
   */
  implementationStatementId?: string;
  /**
   *
   * @type {Array<DomainLink>}
   * @memberof DomainFinding
   */
  links?: Array<DomainLink>;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainFinding
   */
  origins?: Array<string>;
  /**
   *
   * @type {Array<DomainProperty>}
   * @memberof DomainFinding
   */
  props?: Array<DomainProperty>;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainFinding
   */
  relatedObservations?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainFinding
   */
  relatedRisks?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof DomainFinding
   */
  remarks?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainFinding
   */
  target?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof DomainFinding
   */
  title?: string;
}
/**
 *
 * @export
 * @interface DomainLink
 */
export interface DomainLink {
  /**
   *
   * @type {string}
   * @memberof DomainLink
   */
  href?: string;
  /**
   *
   * @type {string}
   * @memberof DomainLink
   */
  mediaType?: string;
  /**
   *
   * @type {string}
   * @memberof DomainLink
   */
  rel?: string;
  /**
   *
   * @type {string}
   * @memberof DomainLink
   */
  resourceFragment?: string;
  /**
   *
   * @type {string}
   * @memberof DomainLink
   */
  text?: string;
}
/**
 *
 * @export
 * @interface DomainLocalDefinition
 */
export interface DomainLocalDefinition {
  /**
   * Reference to Activity
   * @type {Array<string>}
   * @memberof DomainLocalDefinition
   */
  activities?: Array<string>;
  /**
   * Reference to component.Component
   * @type {Array<string>}
   * @memberof DomainLocalDefinition
   */
  components?: Array<string>;
  /**
   * Reference to ssp.InventoryItem
   * @type {Array<string>}
   * @memberof DomainLocalDefinition
   */
  inventoryItems?: Array<string>;
  /**
   *
   * @type {Array<DomainObjective>}
   * @memberof DomainLocalDefinition
   */
  objectives?: Array<DomainObjective>;
  /**
   *
   * @type {string}
   * @memberof DomainLocalDefinition
   */
  remarks?: string;
  /**
   * Reference to identity.User
   * @type {Array<string>}
   * @memberof DomainLocalDefinition
   */
  users?: Array<string>;
}
/**
 *
 * @export
 * @interface DomainLogEntry
 */
export interface DomainLogEntry {
  /**
   *
   * @type {string}
   * @memberof DomainLogEntry
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof DomainLogEntry
   */
  end?: string;
  /**
   *
   * @type {Array<DomainLink>}
   * @memberof DomainLogEntry
   */
  links?: Array<DomainLink>;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainLogEntry
   */
  loggedBy?: Array<string>;
  /**
   *
   * @type {Array<DomainProperty>}
   * @memberof DomainLogEntry
   */
  props?: Array<DomainProperty>;
  /**
   *
   * @type {string}
   * @memberof DomainLogEntry
   */
  remarks?: string;
  /**
   *
   * @type {string}
   * @memberof DomainLogEntry
   */
  start?: string;
  /**
   *
   * @type {string}
   * @memberof DomainLogEntry
   */
  timestamp?: string;
  /**
   *
   * @type {string}
   * @memberof DomainLogEntry
   */
  title?: string;
  /**
   *
   * @type {number}
   * @memberof DomainLogEntry
   */
  type?: number;
}
/**
 *
 * @export
 * @interface DomainObjective
 */
export interface DomainObjective {
  /**
   *
   * @type {string}
   * @memberof DomainObjective
   */
  control?: string;
  /**
   *
   * @type {string}
   * @memberof DomainObjective
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof DomainObjective
   */
  id?: string;
  /**
   *
   * @type {Array<DomainLink>}
   * @memberof DomainObjective
   */
  links?: Array<DomainLink>;
  /**
   *
   * @type {Array<DomainPart>}
   * @memberof DomainObjective
   */
  parts?: Array<DomainPart>;
  /**
   *
   * @type {Array<DomainProperty>}
   * @memberof DomainObjective
   */
  props?: Array<DomainProperty>;
  /**
   *
   * @type {string}
   * @memberof DomainObjective
   */
  remarks?: string;
  /**
   *
   * @type {string}
   * @memberof DomainObjective
   */
  title?: string;
}
/**
 *
 * @export
 * @interface DomainObjectiveSelection
 */
export interface DomainObjectiveSelection {
  /**
   *
   * @type {string}
   * @memberof DomainObjectiveSelection
   */
  description?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainObjectiveSelection
   */
  exclude?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainObjectiveSelection
   */
  include?: Array<string>;
  /**
   *
   * @type {boolean}
   * @memberof DomainObjectiveSelection
   */
  includeAll?: boolean;
  /**
   *
   * @type {Array<DomainLink>}
   * @memberof DomainObjectiveSelection
   */
  links?: Array<DomainLink>;
  /**
   *
   * @type {Array<DomainProperty>}
   * @memberof DomainObjectiveSelection
   */
  props?: Array<DomainProperty>;
  /**
   *
   * @type {string}
   * @memberof DomainObjectiveSelection
   */
  remarks?: string;
  /**
   *
   * @type {string}
   * @memberof DomainObjectiveSelection
   */
  title?: string;
}
/**
 *
 * @export
 * @interface DomainObservation
 */
export interface DomainObservation {
  /**
   *
   * @type {string}
   * @memberof DomainObservation
   */
  collected?: string;
  /**
   *
   * @type {string}
   * @memberof DomainObservation
   */
  description?: string;
  /**
   *
   * @type {Array<DomainEvidence>}
   * @memberof DomainObservation
   */
  evidences?: Array<DomainEvidence>;
  /**
   *
   * @type {string}
   * @memberof DomainObservation
   */
  expires?: string;
  /**
   *
   * @type {string}
   * @memberof DomainObservation
   */
  id?: string;
  /**
   *
   * @type {Array<DomainLink>}
   * @memberof DomainObservation
   */
  links?: Array<DomainLink>;
  /**
   *
   * @type {Array<DomainProperty>}
   * @memberof DomainObservation
   */
  props?: Array<DomainProperty>;
  /**
   *
   * @type {string}
   * @memberof DomainObservation
   */
  remarks?: string;
  /**
   *
   * @type {string}
   * @memberof DomainObservation
   */
  title?: string;
}
/**
 *
 * @export
 * @interface DomainOrigin
 */
export interface DomainOrigin {
  /**
   *
   * @type {Array<string>}
   * @memberof DomainOrigin
   */
  actors?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainOrigin
   */
  relatedTasks?: Array<string>;
}
/**
 *
 * @export
 * @interface DomainPart
 */
export interface DomainPart {
  /**
   * An optional textual providing a sub-type or characterization of the part\'s name, or a category to which the part belongs.
   * @type {string}
   * @memberof DomainPart
   */
  class?: string;
  /**
   * A unique identifier for the part.
   * @type {string}
   * @memberof DomainPart
   */
  id?: string;
  /**
   *
   * @type {Array<DomainLink>}
   * @memberof DomainPart
   */
  links?: Array<DomainLink>;
  /**
   * A textual label that uniquely identifies the part\'s semantic type, which exists in a value space qualified by the ns.
   * @type {string}
   * @memberof DomainPart
   */
  name?: string;
  /**
   * An optional namespace qualifying the part\'s name. This allows different organizations to associate distinct semantics with the same name.
   * @type {string}
   * @memberof DomainPart
   */
  ns?: string;
  /**
   *
   * @type {Array<DomainProperty>}
   * @memberof DomainPart
   */
  props?: Array<DomainProperty>;
  /**
   * Permits multiple paragraphs, lists, tables etc.
   * @type {string}
   * @memberof DomainPart
   */
  prose?: string;
  /**
   * An optional name given to the part, which may be used by a tool for display and navigation.
   * @type {string}
   * @memberof DomainPart
   */
  title?: string;
}
/**
 *
 * @export
 * @interface DomainProperty
 */
export interface DomainProperty {
  /**
   *
   * @type {string}
   * @memberof DomainProperty
   */
  class?: string;
  /**
   *
   * @type {string}
   * @memberof DomainProperty
   */
  group?: string;
  /**
   *
   * @type {string}
   * @memberof DomainProperty
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DomainProperty
   */
  ns?: string;
  /**
   *
   * @type {string}
   * @memberof DomainProperty
   */
  remarks?: string;
  /**
   *
   * @type {string}
   * @memberof DomainProperty
   */
  value?: string;
}
/**
 *
 * @export
 * @interface DomainResult
 */
export interface DomainResult {
  /**
   *
   * @type {Array<DomainLogEntry>}
   * @memberof DomainResult
   */
  assessmentLogEntries?: Array<DomainLogEntry>;
  /**
   *
   * @type {Array<DomainAttestation>}
   * @memberof DomainResult
   */
  attestations?: Array<DomainAttestation>;
  /**
   *
   * @type {string}
   * @memberof DomainResult
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof DomainResult
   */
  end?: string;
  /**
   *
   * @type {Array<DomainFinding>}
   * @memberof DomainResult
   */
  findings?: Array<DomainFinding>;
  /**
   *
   * @type {string}
   * @memberof DomainResult
   */
  id?: string;
  /**
   *
   * @type {Array<DomainLink>}
   * @memberof DomainResult
   */
  links?: Array<DomainLink>;
  /**
   *
   * @type {DomainLocalDefinition}
   * @memberof DomainResult
   */
  localDefinitions?: DomainLocalDefinition;
  /**
   *
   * @type {Array<DomainObservation>}
   * @memberof DomainResult
   */
  observations?: Array<DomainObservation>;
  /**
   *
   * @type {string}
   * @memberof DomainResult
   */
  potato?: string;
  /**
   *
   * @type {Array<DomainProperty>}
   * @memberof DomainResult
   */
  props?: Array<DomainProperty>;
  /**
   *
   * @type {string}
   * @memberof DomainResult
   */
  remarks?: string;
  /**
   *
   * @type {Array<DomainControlsAndObjectives>}
   * @memberof DomainResult
   */
  reviewedControls?: Array<DomainControlsAndObjectives>;
  /**
   *
   * @type {Array<DomainRisk>}
   * @memberof DomainResult
   */
  risks?: Array<DomainRisk>;
  /**
   *
   * @type {string}
   * @memberof DomainResult
   */
  start?: string;
  /**
   *
   * @type {string}
   * @memberof DomainResult
   */
  title?: string;
}
/**
 *
 * @export
 * @interface DomainRisk
 */
export interface DomainRisk {
  /**
   *
   * @type {Array<DomainCharacterization>}
   * @memberof DomainRisk
   */
  characterizations?: Array<DomainCharacterization>;
  /**
   *
   * @type {string}
   * @memberof DomainRisk
   */
  deadline?: string;
  /**
   *
   * @type {string}
   * @memberof DomainRisk
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof DomainRisk
   */
  id?: string;
  /**
   *
   * @type {Array<DomainLink>}
   * @memberof DomainRisk
   */
  links?: Array<DomainLink>;
  /**
   *
   * @type {Array<DomainProperty>}
   * @memberof DomainRisk
   */
  props?: Array<DomainProperty>;
  /**
   *
   * @type {string}
   * @memberof DomainRisk
   */
  remarks?: string;
  /**
   *
   * @type {string}
   * @memberof DomainRisk
   */
  title?: string;
}
/**
 *
 * @export
 * @interface DomainSelection
 */
export interface DomainSelection {
  /**
   *
   * @type {Array<string>}
   * @memberof DomainSelection
   */
  exclude?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainSelection
   */
  include?: Array<string>;
  /**
   *
   * @type {boolean}
   * @memberof DomainSelection
   */
  includeAll?: boolean;
}
/**
 *
 * @export
 * @interface HandlerAttachMetadataRequest
 */
export interface HandlerAttachMetadataRequest {
  /**
   *
   * @type {string}
   * @memberof HandlerAttachMetadataRequest
   */
  collection: string;
  /**
   *
   * @type {string}
   * @memberof HandlerAttachMetadataRequest
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof HandlerAttachMetadataRequest
   */
  revisionDescription?: string;
  /**
   *
   * @type {string}
   * @memberof HandlerAttachMetadataRequest
   */
  revisionRemarks?: string;
  /**
   *
   * @type {string}
   * @memberof HandlerAttachMetadataRequest
   */
  revisionTitle?: string;
}
/**
 *
 * @export
 * @interface HandlerCatalogIdResponse
 */
export interface HandlerCatalogIdResponse {
  /**
   * The unique identifier of the catalog. Required: true Example: \"123abc\"
   * @type {string}
   * @memberof HandlerCatalogIdResponse
   */
  id?: string;
}
/**
 *
 * @export
 * @interface HandlerCreateActivityRequest
 */
export interface HandlerCreateActivityRequest {
  /**
   *
   * @type {string}
   * @memberof HandlerCreateActivityRequest
   */
  description?: string;
  /**
   *
   * @type {HandlerCreateActivityRequestProvider}
   * @memberof HandlerCreateActivityRequest
   */
  provider: HandlerCreateActivityRequestProvider;
  /**
   *
   * @type {HandlerCreateActivityRequestSubjects}
   * @memberof HandlerCreateActivityRequest
   */
  subjects?: HandlerCreateActivityRequestSubjects;
  /**
   *
   * @type {string}
   * @memberof HandlerCreateActivityRequest
   */
  title: string;
}
/**
 *
 * @export
 * @interface HandlerCreateActivityRequestProvider
 */
export interface HandlerCreateActivityRequestProvider {
  /**
   *
   * @type {string}
   * @memberof HandlerCreateActivityRequestProvider
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof HandlerCreateActivityRequestProvider
   */
  package: string;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof HandlerCreateActivityRequestProvider
   */
  params?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof HandlerCreateActivityRequestProvider
   */
  version: string;
}
/**
 *
 * @export
 * @interface HandlerCreateActivityRequestSubjects
 */
export interface HandlerCreateActivityRequestSubjects {
  /**
   *
   * @type {string}
   * @memberof HandlerCreateActivityRequestSubjects
   */
  description: string;
  /**
   *
   * @type {Array<HandlerCreateActivityRequestSubjectsExpressionsInner>}
   * @memberof HandlerCreateActivityRequestSubjects
   */
  expressions?: Array<HandlerCreateActivityRequestSubjectsExpressionsInner>;
  /**
   *
   * @type {Array<string>}
   * @memberof HandlerCreateActivityRequestSubjects
   */
  ids?: Array<string>;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof HandlerCreateActivityRequestSubjects
   */
  labels?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof HandlerCreateActivityRequestSubjects
   */
  query?: string;
  /**
   *
   * @type {string}
   * @memberof HandlerCreateActivityRequestSubjects
   */
  title: string;
}
/**
 *
 * @export
 * @interface HandlerCreateActivityRequestSubjectsExpressionsInner
 */
export interface HandlerCreateActivityRequestSubjectsExpressionsInner {
  /**
   *
   * @type {string}
   * @memberof HandlerCreateActivityRequestSubjectsExpressionsInner
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof HandlerCreateActivityRequestSubjectsExpressionsInner
   */
  operator?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof HandlerCreateActivityRequestSubjectsExpressionsInner
   */
  values?: Array<string>;
}
/**
 *
 * @export
 * @interface HandlerCreateCatalogRequest
 */
export interface HandlerCreateCatalogRequest {
  /**
   *
   * @type {HandlerCreateCatalogRequestCatalog}
   * @memberof HandlerCreateCatalogRequest
   */
  catalog?: HandlerCreateCatalogRequestCatalog;
}
/**
 *
 * @export
 * @interface HandlerCreateCatalogRequestCatalog
 */
export interface HandlerCreateCatalogRequestCatalog {
  /**
   *
   * @type {string}
   * @memberof HandlerCreateCatalogRequestCatalog
   */
  title: string;
}
/**
 *
 * @export
 * @interface HandlerCreatePlanRequest
 */
export interface HandlerCreatePlanRequest {
  /**
   *
   * @type {string}
   * @memberof HandlerCreatePlanRequest
   */
  title: string;
}
/**
 *
 * @export
 * @interface HandlerCreateSSPRequest
 */
export interface HandlerCreateSSPRequest {
  /**
   *
   * @type {string}
   * @memberof HandlerCreateSSPRequest
   */
  title: string;
}
/**
 *
 * @export
 * @interface HandlerCreateTaskRequest
 */
export interface HandlerCreateTaskRequest {
  /**
   *
   * @type {string}
   * @memberof HandlerCreateTaskRequest
   */
  description?: string;
  /**
   * TODO: We are keeping it minimal for now for the demo
   * @type {string}
   * @memberof HandlerCreateTaskRequest
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof HandlerCreateTaskRequest
   */
  type: string;
}
/**
 *
 * @export
 * @interface HandlerIdResponse
 */
export interface HandlerIdResponse {
  /**
   * The unique identifier of the plan. Required: true Example: \"456def\"
   * @type {string}
   * @memberof HandlerIdResponse
   */
  id?: string;
}
/**
 *
 * @export
 * @interface ServiceComplianceStatusByTargets
 */
export interface ServiceComplianceStatusByTargets {
  /**
   *
   * @type {string}
   * @memberof ServiceComplianceStatusByTargets
   */
  compliance?: string;
  /**
   *
   * @type {string}
   * @memberof ServiceComplianceStatusByTargets
   */
  control?: string;
  /**
   *
   * @type {string}
   * @memberof ServiceComplianceStatusByTargets
   */
  target?: string;
}
/**
 *
 * @export
 * @interface ServiceComplianceStatusOverTime
 */
export interface ServiceComplianceStatusOverTime {
  /**
   *
   * @type {string}
   * @memberof ServiceComplianceStatusOverTime
   */
  date?: string;
  /**
   *
   * @type {number}
   * @memberof ServiceComplianceStatusOverTime
   */
  findings?: number;
  /**
   *
   * @type {number}
   * @memberof ServiceComplianceStatusOverTime
   */
  observations?: number;
  /**
   *
   * @type {number}
   * @memberof ServiceComplianceStatusOverTime
   */
  risks?: number;
}
/**
 *
 * @export
 * @interface ServicePlanSummary
 */
export interface ServicePlanSummary {
  /**
   *
   * @type {string}
   * @memberof ServicePlanSummary
   */
  complianceStatus?: string;
  /**
   *
   * @type {string}
   * @memberof ServicePlanSummary
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ServicePlanSummary
   */
  endDate?: string;
  /**
   *
   * @type {number}
   * @memberof ServicePlanSummary
   */
  numControls?: number;
  /**
   *
   * @type {number}
   * @memberof ServicePlanSummary
   */
  numObservations?: number;
  /**
   *
   * @type {number}
   * @memberof ServicePlanSummary
   */
  numRisks?: number;
  /**
   *
   * @type {number}
   * @memberof ServicePlanSummary
   */
  numSubjects?: number;
  /**
   *
   * @type {string}
   * @memberof ServicePlanSummary
   */
  published?: string;
  /**
   *
   * @type {ServiceRiskLevels}
   * @memberof ServicePlanSummary
   */
  riskLevels?: ServiceRiskLevels;
  /**
   *
   * @type {number}
   * @memberof ServicePlanSummary
   */
  riskScore?: number;
  /**
   *
   * @type {string}
   * @memberof ServicePlanSummary
   */
  status?: string;
}
/**
 *
 * @export
 * @interface ServiceRemediationVsTime
 */
export interface ServiceRemediationVsTime {
  /**
   *
   * @type {string}
   * @memberof ServiceRemediationVsTime
   */
  control?: string;
  /**
   *
   * @type {string}
   * @memberof ServiceRemediationVsTime
   */
  remediation?: string;
}
/**
 *
 * @export
 * @interface ServiceRiskLevels
 */
export interface ServiceRiskLevels {
  /**
   *
   * @type {number}
   * @memberof ServiceRiskLevels
   */
  high?: number;
  /**
   *
   * @type {number}
   * @memberof ServiceRiskLevels
   */
  low?: number;
  /**
   *
   * @type {number}
   * @memberof ServiceRiskLevels
   */
  medium?: number;
}

/**
 * CatalogApi - axios parameter creator
 * @export
 */
export const CatalogApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Create a catalog with the given title
     * @summary Create a catalog
     * @param {HandlerCreateCatalogRequest} handlerCreateCatalogRequest Catalog to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    catalogPost: async (
      handlerCreateCatalogRequest: HandlerCreateCatalogRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'handlerCreateCatalogRequest' is not null or undefined
      assertParamExists("catalogPost", "handlerCreateCatalogRequest", handlerCreateCatalogRequest);
      const localVarPath = `/catalog`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        handlerCreateCatalogRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CatalogApi - functional programming interface
 * @export
 */
export const CatalogApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CatalogApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a catalog with the given title
     * @summary Create a catalog
     * @param {HandlerCreateCatalogRequest} handlerCreateCatalogRequest Catalog to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async catalogPost(
      handlerCreateCatalogRequest: HandlerCreateCatalogRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerCatalogIdResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.catalogPost(handlerCreateCatalogRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CatalogApi - factory interface
 * @export
 */
export const CatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = CatalogApiFp(configuration);
  return {
    /**
     * Create a catalog with the given title
     * @summary Create a catalog
     * @param {HandlerCreateCatalogRequest} handlerCreateCatalogRequest Catalog to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    catalogPost(
      handlerCreateCatalogRequest: HandlerCreateCatalogRequest,
      options?: any,
    ): AxiosPromise<HandlerCatalogIdResponse> {
      return localVarFp.catalogPost(handlerCreateCatalogRequest, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
export class CatalogApi extends BaseAPI {
  /**
   * Create a catalog with the given title
   * @summary Create a catalog
   * @param {HandlerCreateCatalogRequest} handlerCreateCatalogRequest Catalog to add
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogApi
   */
  public catalogPost(handlerCreateCatalogRequest: HandlerCreateCatalogRequest, options?: AxiosRequestConfig) {
    return CatalogApiFp(this.configuration)
      .catalogPost(handlerCreateCatalogRequest, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * MetadataApi - axios parameter creator
 * @export
 */
export const MetadataApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This method attaches metadata to a specific revision.
     * @summary Attaches metadata to a specific revision
     * @param {HandlerAttachMetadataRequest} handlerAttachMetadataRequest Revision that will be attached
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadataRevisionsPost: async (
      handlerAttachMetadataRequest: HandlerAttachMetadataRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'handlerAttachMetadataRequest' is not null or undefined
      assertParamExists("metadataRevisionsPost", "handlerAttachMetadataRequest", handlerAttachMetadataRequest);
      const localVarPath = `/metadata/revisions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        handlerAttachMetadataRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MetadataApi - functional programming interface
 * @export
 */
export const MetadataApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MetadataApiAxiosParamCreator(configuration);
  return {
    /**
     * This method attaches metadata to a specific revision.
     * @summary Attaches metadata to a specific revision
     * @param {HandlerAttachMetadataRequest} handlerAttachMetadataRequest Revision that will be attached
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metadataRevisionsPost(
      handlerAttachMetadataRequest: HandlerAttachMetadataRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.metadataRevisionsPost(
        handlerAttachMetadataRequest,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MetadataApi - factory interface
 * @export
 */
export const MetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = MetadataApiFp(configuration);
  return {
    /**
     * This method attaches metadata to a specific revision.
     * @summary Attaches metadata to a specific revision
     * @param {HandlerAttachMetadataRequest} handlerAttachMetadataRequest Revision that will be attached
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadataRevisionsPost(
      handlerAttachMetadataRequest: HandlerAttachMetadataRequest,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .metadataRevisionsPost(handlerAttachMetadataRequest, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export class MetadataApi extends BaseAPI {
  /**
   * This method attaches metadata to a specific revision.
   * @summary Attaches metadata to a specific revision
   * @param {HandlerAttachMetadataRequest} handlerAttachMetadataRequest Revision that will be attached
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetadataApi
   */
  public metadataRevisionsPost(
    handlerAttachMetadataRequest: HandlerAttachMetadataRequest,
    options?: AxiosRequestConfig,
  ) {
    return MetadataApiFp(this.configuration)
      .metadataRevisionsPost(handlerAttachMetadataRequest, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * PlanApi - axios parameter creator
 * @export
 */
export const PlanApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Activate a plan by its ID. If the plan is already active, no action will be taken.
     * @summary Activate a plan
     * @param {string} id Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdActivatePut: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiPlanIdActivatePut", "id", id);
      const localVarPath = `/api/plan/{id}/activate`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Return the assessment results related with the plan with the given ID.
     * @summary Return the assessment results
     * @param {string} id Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiPlanIdResultsGet", "id", id);
      const localVarPath = `/api/plan/{id}/results`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Return the compliance over time of the result with the given ID.
     * @summary Return the compliance over time
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdComplianceOverTimeGet: async (
      id: string,
      resultId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdComplianceOverTimeGet", "id", id);
      // verify required parameter 'resultId' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdComplianceOverTimeGet", "resultId", resultId);
      const localVarPath = `/api/plan/{id}/results/{resultId}/compliance-over-time`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"resultId"}}`, encodeURIComponent(String(resultId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Return the compliance status by targets of the result with the given ID.
     * @summary Return the compliance status by targets
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdComplianceStatusGet: async (
      id: string,
      resultId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdComplianceStatusGet", "id", id);
      // verify required parameter 'resultId' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdComplianceStatusGet", "resultId", resultId);
      const localVarPath = `/api/plan/{id}/results/{resultId}/compliance-status`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"resultId"}}`, encodeURIComponent(String(resultId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Return the findings of the result with the given ID.
     * @summary Return the findings
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdFindingsGet: async (
      id: string,
      resultId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdFindingsGet", "id", id);
      // verify required parameter 'resultId' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdFindingsGet", "resultId", resultId);
      const localVarPath = `/api/plan/{id}/results/{resultId}/findings`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"resultId"}}`, encodeURIComponent(String(resultId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Return the observations of the result with the given ID.
     * @summary Return the observations
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdObservationsGet: async (
      id: string,
      resultId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdObservationsGet", "id", id);
      // verify required parameter 'resultId' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdObservationsGet", "resultId", resultId);
      const localVarPath = `/api/plan/{id}/results/{resultId}/observations`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"resultId"}}`, encodeURIComponent(String(resultId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Return the remediation versus time of the result with the given ID.
     * @summary Return the remediation versus time
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdRemediationVsTimeGet: async (
      id: string,
      resultId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdRemediationVsTimeGet", "id", id);
      // verify required parameter 'resultId' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdRemediationVsTimeGet", "resultId", resultId);
      const localVarPath = `/api/plan/{id}/results/{resultId}/remediation-vs-time`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"resultId"}}`, encodeURIComponent(String(resultId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Return the risks of the result with the given ID.
     * @summary Return the risks
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdRisksGet: async (
      id: string,
      resultId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdRisksGet", "id", id);
      // verify required parameter 'resultId' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdRisksGet", "resultId", resultId);
      const localVarPath = `/api/plan/{id}/results/{resultId}/risks`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"resultId"}}`, encodeURIComponent(String(resultId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Return the summary of the result with the given ID.
     * @summary Return the result summary
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdSummaryGet: async (
      id: string,
      resultId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdSummaryGet", "id", id);
      // verify required parameter 'resultId' is not null or undefined
      assertParamExists("apiPlanIdResultsResultIdSummaryGet", "resultId", resultId);
      const localVarPath = `/api/plan/{id}/results/{resultId}/summary`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"resultId"}}`, encodeURIComponent(String(resultId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This method creates a new task and adds it to a specific plan.
     * @summary Creates a new task for a specific plan
     * @param {string} id Plan ID
     * @param {HandlerCreateTaskRequest} handlerCreateTaskRequest Task to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdTasksPost: async (
      id: string,
      handlerCreateTaskRequest: HandlerCreateTaskRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiPlanIdTasksPost", "id", id);
      // verify required parameter 'handlerCreateTaskRequest' is not null or undefined
      assertParamExists("apiPlanIdTasksPost", "handlerCreateTaskRequest", handlerCreateTaskRequest);
      const localVarPath = `/api/plan/{id}/tasks`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        handlerCreateTaskRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This function is used to create an activity for a given task.
     * @summary Create activity
     * @param {number} id Plan ID
     * @param {number} taskId Task ID
     * @param {HandlerCreateActivityRequest} handlerCreateActivityRequest Activity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdTasksTaskIdActivitiesPost: async (
      id: number,
      taskId: number,
      handlerCreateActivityRequest: HandlerCreateActivityRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiPlanIdTasksTaskIdActivitiesPost", "id", id);
      // verify required parameter 'taskId' is not null or undefined
      assertParamExists("apiPlanIdTasksTaskIdActivitiesPost", "taskId", taskId);
      // verify required parameter 'handlerCreateActivityRequest' is not null or undefined
      assertParamExists(
        "apiPlanIdTasksTaskIdActivitiesPost",
        "handlerCreateActivityRequest",
        handlerCreateActivityRequest,
      );
      const localVarPath = `/api/plan/{id}/tasks/{taskId}/activities`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        handlerCreateActivityRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new plan in the system
     * @summary Create a plan
     * @param {HandlerCreatePlanRequest} handlerCreatePlanRequest Plan to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanPost: async (
      handlerCreatePlanRequest: HandlerCreatePlanRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'handlerCreatePlanRequest' is not null or undefined
      assertParamExists("apiPlanPost", "handlerCreatePlanRequest", handlerCreatePlanRequest);
      const localVarPath = `/api/plan`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        handlerCreatePlanRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PlanApi - functional programming interface
 * @export
 */
export const PlanApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PlanApiAxiosParamCreator(configuration);
  return {
    /**
     * Activate a plan by its ID. If the plan is already active, no action will be taken.
     * @summary Activate a plan
     * @param {string} id Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlanIdActivatePut(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlanIdActivatePut(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Return the assessment results related with the plan with the given ID.
     * @summary Return the assessment results
     * @param {string} id Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlanIdResultsGet(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainResult>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlanIdResultsGet(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Return the compliance over time of the result with the given ID.
     * @summary Return the compliance over time
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlanIdResultsResultIdComplianceOverTimeGet(
      id: string,
      resultId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceComplianceStatusOverTime>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlanIdResultsResultIdComplianceOverTimeGet(
        id,
        resultId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Return the compliance status by targets of the result with the given ID.
     * @summary Return the compliance status by targets
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlanIdResultsResultIdComplianceStatusGet(
      id: string,
      resultId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceComplianceStatusByTargets>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlanIdResultsResultIdComplianceStatusGet(
        id,
        resultId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Return the findings of the result with the given ID.
     * @summary Return the findings
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlanIdResultsResultIdFindingsGet(
      id: string,
      resultId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainFinding>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlanIdResultsResultIdFindingsGet(
        id,
        resultId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Return the observations of the result with the given ID.
     * @summary Return the observations
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlanIdResultsResultIdObservationsGet(
      id: string,
      resultId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainObservation>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlanIdResultsResultIdObservationsGet(
        id,
        resultId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Return the remediation versus time of the result with the given ID.
     * @summary Return the remediation versus time
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlanIdResultsResultIdRemediationVsTimeGet(
      id: string,
      resultId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceRemediationVsTime>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlanIdResultsResultIdRemediationVsTimeGet(
        id,
        resultId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Return the risks of the result with the given ID.
     * @summary Return the risks
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlanIdResultsResultIdRisksGet(
      id: string,
      resultId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainRisk>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlanIdResultsResultIdRisksGet(id, resultId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Return the summary of the result with the given ID.
     * @summary Return the result summary
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlanIdResultsResultIdSummaryGet(
      id: string,
      resultId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlanSummary>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlanIdResultsResultIdSummaryGet(
        id,
        resultId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This method creates a new task and adds it to a specific plan.
     * @summary Creates a new task for a specific plan
     * @param {string} id Plan ID
     * @param {HandlerCreateTaskRequest} handlerCreateTaskRequest Task to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlanIdTasksPost(
      id: string,
      handlerCreateTaskRequest: HandlerCreateTaskRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlanIdTasksPost(
        id,
        handlerCreateTaskRequest,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This function is used to create an activity for a given task.
     * @summary Create activity
     * @param {number} id Plan ID
     * @param {number} taskId Task ID
     * @param {HandlerCreateActivityRequest} handlerCreateActivityRequest Activity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlanIdTasksTaskIdActivitiesPost(
      id: number,
      taskId: number,
      handlerCreateActivityRequest: HandlerCreateActivityRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model201>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlanIdTasksTaskIdActivitiesPost(
        id,
        taskId,
        handlerCreateActivityRequest,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Creates a new plan in the system
     * @summary Create a plan
     * @param {HandlerCreatePlanRequest} handlerCreatePlanRequest Plan to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlanPost(
      handlerCreatePlanRequest: HandlerCreatePlanRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIdResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlanPost(handlerCreatePlanRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PlanApi - factory interface
 * @export
 */
export const PlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PlanApiFp(configuration);
  return {
    /**
     * Activate a plan by its ID. If the plan is already active, no action will be taken.
     * @summary Activate a plan
     * @param {string} id Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdActivatePut(id: string, options?: any): AxiosPromise<void> {
      return localVarFp.apiPlanIdActivatePut(id, options).then(request => request(axios, basePath));
    },
    /**
     * Return the assessment results related with the plan with the given ID.
     * @summary Return the assessment results
     * @param {string} id Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsGet(id: string, options?: any): AxiosPromise<Array<DomainResult>> {
      return localVarFp.apiPlanIdResultsGet(id, options).then(request => request(axios, basePath));
    },
    /**
     * Return the compliance over time of the result with the given ID.
     * @summary Return the compliance over time
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdComplianceOverTimeGet(
      id: string,
      resultId: string,
      options?: any,
    ): AxiosPromise<Array<ServiceComplianceStatusOverTime>> {
      return localVarFp
        .apiPlanIdResultsResultIdComplianceOverTimeGet(id, resultId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Return the compliance status by targets of the result with the given ID.
     * @summary Return the compliance status by targets
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdComplianceStatusGet(
      id: string,
      resultId: string,
      options?: any,
    ): AxiosPromise<Array<ServiceComplianceStatusByTargets>> {
      return localVarFp
        .apiPlanIdResultsResultIdComplianceStatusGet(id, resultId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Return the findings of the result with the given ID.
     * @summary Return the findings
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdFindingsGet(
      id: string,
      resultId: string,
      options?: any,
    ): AxiosPromise<Array<DomainFinding>> {
      return localVarFp
        .apiPlanIdResultsResultIdFindingsGet(id, resultId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Return the observations of the result with the given ID.
     * @summary Return the observations
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdObservationsGet(
      id: string,
      resultId: string,
      options?: any,
    ): AxiosPromise<Array<DomainObservation>> {
      return localVarFp
        .apiPlanIdResultsResultIdObservationsGet(id, resultId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Return the remediation versus time of the result with the given ID.
     * @summary Return the remediation versus time
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdRemediationVsTimeGet(
      id: string,
      resultId: string,
      options?: any,
    ): AxiosPromise<Array<ServiceRemediationVsTime>> {
      return localVarFp
        .apiPlanIdResultsResultIdRemediationVsTimeGet(id, resultId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Return the risks of the result with the given ID.
     * @summary Return the risks
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdRisksGet(id: string, resultId: string, options?: any): AxiosPromise<Array<DomainRisk>> {
      return localVarFp
        .apiPlanIdResultsResultIdRisksGet(id, resultId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Return the summary of the result with the given ID.
     * @summary Return the result summary
     * @param {string} id Plan ID
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdResultsResultIdSummaryGet(id: string, resultId: string, options?: any): AxiosPromise<ServicePlanSummary> {
      return localVarFp
        .apiPlanIdResultsResultIdSummaryGet(id, resultId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * This method creates a new task and adds it to a specific plan.
     * @summary Creates a new task for a specific plan
     * @param {string} id Plan ID
     * @param {HandlerCreateTaskRequest} handlerCreateTaskRequest Task to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdTasksPost(
      id: string,
      handlerCreateTaskRequest: HandlerCreateTaskRequest,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiPlanIdTasksPost(id, handlerCreateTaskRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     * This function is used to create an activity for a given task.
     * @summary Create activity
     * @param {number} id Plan ID
     * @param {number} taskId Task ID
     * @param {HandlerCreateActivityRequest} handlerCreateActivityRequest Activity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanIdTasksTaskIdActivitiesPost(
      id: number,
      taskId: number,
      handlerCreateActivityRequest: HandlerCreateActivityRequest,
      options?: any,
    ): AxiosPromise<Model201> {
      return localVarFp
        .apiPlanIdTasksTaskIdActivitiesPost(id, taskId, handlerCreateActivityRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Creates a new plan in the system
     * @summary Create a plan
     * @param {HandlerCreatePlanRequest} handlerCreatePlanRequest Plan to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlanPost(handlerCreatePlanRequest: HandlerCreatePlanRequest, options?: any): AxiosPromise<HandlerIdResponse> {
      return localVarFp.apiPlanPost(handlerCreatePlanRequest, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * PlanApi - object-oriented interface
 * @export
 * @class PlanApi
 * @extends {BaseAPI}
 */
export class PlanApi extends BaseAPI {
  /**
   * Activate a plan by its ID. If the plan is already active, no action will be taken.
   * @summary Activate a plan
   * @param {string} id Plan ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  public apiPlanIdActivatePut(id: string, options?: AxiosRequestConfig) {
    return PlanApiFp(this.configuration)
      .apiPlanIdActivatePut(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Return the assessment results related with the plan with the given ID.
   * @summary Return the assessment results
   * @param {string} id Plan ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  public apiPlanIdResultsGet(id: string, options?: AxiosRequestConfig) {
    return PlanApiFp(this.configuration)
      .apiPlanIdResultsGet(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Return the compliance over time of the result with the given ID.
   * @summary Return the compliance over time
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  public apiPlanIdResultsResultIdComplianceOverTimeGet(id: string, resultId: string, options?: AxiosRequestConfig) {
    return PlanApiFp(this.configuration)
      .apiPlanIdResultsResultIdComplianceOverTimeGet(id, resultId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Return the compliance status by targets of the result with the given ID.
   * @summary Return the compliance status by targets
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  public apiPlanIdResultsResultIdComplianceStatusGet(id: string, resultId: string, options?: AxiosRequestConfig) {
    return PlanApiFp(this.configuration)
      .apiPlanIdResultsResultIdComplianceStatusGet(id, resultId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Return the findings of the result with the given ID.
   * @summary Return the findings
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  public apiPlanIdResultsResultIdFindingsGet(id: string, resultId: string, options?: AxiosRequestConfig) {
    return PlanApiFp(this.configuration)
      .apiPlanIdResultsResultIdFindingsGet(id, resultId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Return the observations of the result with the given ID.
   * @summary Return the observations
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  public apiPlanIdResultsResultIdObservationsGet(id: string, resultId: string, options?: AxiosRequestConfig) {
    return PlanApiFp(this.configuration)
      .apiPlanIdResultsResultIdObservationsGet(id, resultId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Return the remediation versus time of the result with the given ID.
   * @summary Return the remediation versus time
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  public apiPlanIdResultsResultIdRemediationVsTimeGet(id: string, resultId: string, options?: AxiosRequestConfig) {
    return PlanApiFp(this.configuration)
      .apiPlanIdResultsResultIdRemediationVsTimeGet(id, resultId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Return the risks of the result with the given ID.
   * @summary Return the risks
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  public apiPlanIdResultsResultIdRisksGet(id: string, resultId: string, options?: AxiosRequestConfig) {
    return PlanApiFp(this.configuration)
      .apiPlanIdResultsResultIdRisksGet(id, resultId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Return the summary of the result with the given ID.
   * @summary Return the result summary
   * @param {string} id Plan ID
   * @param {string} resultId Result ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  public apiPlanIdResultsResultIdSummaryGet(id: string, resultId: string, options?: AxiosRequestConfig) {
    return PlanApiFp(this.configuration)
      .apiPlanIdResultsResultIdSummaryGet(id, resultId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * This method creates a new task and adds it to a specific plan.
   * @summary Creates a new task for a specific plan
   * @param {string} id Plan ID
   * @param {HandlerCreateTaskRequest} handlerCreateTaskRequest Task to add
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  public apiPlanIdTasksPost(
    id: string,
    handlerCreateTaskRequest: HandlerCreateTaskRequest,
    options?: AxiosRequestConfig,
  ) {
    return PlanApiFp(this.configuration)
      .apiPlanIdTasksPost(id, handlerCreateTaskRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * This function is used to create an activity for a given task.
   * @summary Create activity
   * @param {number} id Plan ID
   * @param {number} taskId Task ID
   * @param {HandlerCreateActivityRequest} handlerCreateActivityRequest Activity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  public apiPlanIdTasksTaskIdActivitiesPost(
    id: number,
    taskId: number,
    handlerCreateActivityRequest: HandlerCreateActivityRequest,
    options?: AxiosRequestConfig,
  ) {
    return PlanApiFp(this.configuration)
      .apiPlanIdTasksTaskIdActivitiesPost(id, taskId, handlerCreateActivityRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Creates a new plan in the system
   * @summary Create a plan
   * @param {HandlerCreatePlanRequest} handlerCreatePlanRequest Plan to add
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlanApi
   */
  public apiPlanPost(handlerCreatePlanRequest: HandlerCreatePlanRequest, options?: AxiosRequestConfig) {
    return PlanApiFp(this.configuration)
      .apiPlanPost(handlerCreatePlanRequest, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * SSPApi - axios parameter creator
 * @export
 */
export const SSPApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Create an SSP with the given title
     * @summary Create an SSP
     * @param {HandlerCreateSSPRequest} handlerCreateSSPRequest SSP to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSspPost: async (
      handlerCreateSSPRequest: HandlerCreateSSPRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'handlerCreateSSPRequest' is not null or undefined
      assertParamExists("apiSspPost", "handlerCreateSSPRequest", handlerCreateSSPRequest);
      const localVarPath = `/api/ssp`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        handlerCreateSSPRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SSPApi - functional programming interface
 * @export
 */
export const SSPApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SSPApiAxiosParamCreator(configuration);
  return {
    /**
     * Create an SSP with the given title
     * @summary Create an SSP
     * @param {HandlerCreateSSPRequest} handlerCreateSSPRequest SSP to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSspPost(
      handlerCreateSSPRequest: HandlerCreateSSPRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIdResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiSspPost(handlerCreateSSPRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * SSPApi - factory interface
 * @export
 */
export const SSPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = SSPApiFp(configuration);
  return {
    /**
     * Create an SSP with the given title
     * @summary Create an SSP
     * @param {HandlerCreateSSPRequest} handlerCreateSSPRequest SSP to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSspPost(handlerCreateSSPRequest: HandlerCreateSSPRequest, options?: any): AxiosPromise<HandlerIdResponse> {
      return localVarFp.apiSspPost(handlerCreateSSPRequest, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * SSPApi - object-oriented interface
 * @export
 * @class SSPApi
 * @extends {BaseAPI}
 */
export class SSPApi extends BaseAPI {
  /**
   * Create an SSP with the given title
   * @summary Create an SSP
   * @param {HandlerCreateSSPRequest} handlerCreateSSPRequest SSP to add
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SSPApi
   */
  public apiSspPost(handlerCreateSSPRequest: HandlerCreateSSPRequest, options?: AxiosRequestConfig) {
    return SSPApiFp(this.configuration)
      .apiSspPost(handlerCreateSSPRequest, options)
      .then(request => request(this.axios, this.basePath));
  }
}
